#pragma once

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////// INCLUDES /////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#include <stdint.h>

///////////////////////////////////////////////////////////////////////////////
/////////////////////////// CLASSES/STRUCTURES ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template <class DERIVED_TYPE>
class Spi
{
    friend DERIVED_TYPE;
    DERIVED_TYPE & derivedType = static_cast <DERIVED_TYPE &> (*this);

    public:
        Spi () = default;

        void     Send    (const uint8_t  * const vData, const uint16_t vLen) { derivedType.Send (vData, vLen);    }
        void     Send    (const uint16_t * const vData, const uint16_t vLen) { derivedType.Send (vData, vLen);    }
        uint16_t Receive (uint8_t        *       vData)                      { return derivedType.Receive (vData); }

    private:
        ~Spi () = default;
};

///////////////////////////////////////////////////////////////////////////////
/////////////////////////////// END OF FILE ///////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
